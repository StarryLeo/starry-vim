" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"             _                                          _
"        ___ | |_  __ _  _ __  _ __  _   _       __   __(_) _ __ ___
"       / __|| __|/ _` || '__|| '__|| | | | _____\ \ / /| || '_ ` _ \
"       \__ \| |_| (_| || |   | |   | |_| ||_____|\ V / | || | | | | |
"       |___/ \__|\__,_||_|   |_|    \__, |        \_/  |_||_| |_| |_|
"                                    |___/
"
"   This is StarryLeo's .vimrc.plugs file forked from https://github.com/spf13/spf13-vim
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of starry. If you
"   wish to alter which groups are imported, see vimrc.before.
"
"   You can find spf13 at http://spf13.com
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        else
            " set default encoding to utf-8
            set encoding=utf-8
            set termencoding=utf-8
        endif
    " }
    " Setup Plug Support {
        " The next two lines ensure that the ~/.vim/viplug/ system works
        set rtp+=~/.vim/viplug
        call plug#begin('~/.vim/viplug')
    " }

" Plugs {

    " Deps {
        Plug 'MarcWeber/vim-addon-mw-utils'
        Plug 'tomtom/tlib_vim'
        if executable('ag')
            Plug 'mileszs/ack.vim'
            let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        elseif executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            Plug 'mileszs/ack.vim'
        elseif executable('ack')
            Plug 'mileszs/ack.vim'
        endif
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    "
    "在你的.vimrc.before.local文件中列出你要用的插件组
    "
    if !exists('g:starry_plug_groups')
        let g:starry_plug_groups=['general', 'writing', 'neocomplete', 'programming', 'php', 'ruby', 'python', 'javascript', 'html', 'misc',]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.plugs.local file:
    "
    "重写插件组包含的插件，将以下值声明在你的.vimrc.plugs.local
    "
    "   let g:override_starry_plugs = 1
    if !exists("g:override_starry_plugs")

    " General {
        if count(g:starry_plug_groups, 'general')
            Plug 'StarryLeo/vim-colorschemes'
            Plug 'scrooloose/nerdtree'
            Plug 'Xuyuanp/nerdtree-git-plugin'
            Plug 'jistr/vim-nerdtree-tabs'
            Plug 'tpope/vim-fugitive'
            if (has("python") || has("python3")) && exists('g:starry_use_powerline') && !exists('g:starry_use_old_powerline')
                Plug 'powerline/powerline', { 'rtp': '/powerline/bindings/vim'}
            elseif exists('g:starry_use_powerline') && exists('g:starry_use_old_powerline')
                Plug 'Lokaltog/vim-powerline'
            else
                Plug 'vim-airline/vim-airline'
                Plug 'vim-airline/vim-airline-themes'
            endif
            Plug 'StarryLeo/powerline-symbol-font', { 'do': './install.sh'}
            Plug 'StarryLeo/Consolas-with-Yahei', { 'do': './install.sh'}
        endif
    " }

    " Writing {
        if count(g:starry_plug_groups, 'writing')
        endif
    " }

    " General Programming {
        if count(g:starry_plug_groups, 'programming')
            Plug 'tpope/vim-fugitive'
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:starry_plug_groups, 'snipmate')
        endif
    " }

    " PHP {
        if count(g:starry_plug_groups, 'php')
        endif
    " }

    " Python {
        if count(g:starry_plug_groups, 'python')
        endif
    " }

    " Javascript {
        if count(g:starry_plug_groups, 'javascript')
        endif
    " }

    " Scala {
        if count(g:starry_plug_groups, 'scala')
        endif
    " }

    " Haskell {
        if count(g:starry_plug_groups, 'haskell')
        endif
    " }

    endif

" }

" Use fork plugs config if available {
    if filereadable(expand("~/.vimrc.plugs.fork"))
        source ~/.vimrc.plugs.fork
    endif
" }

" Use local plugs config if available {
    if filereadable(expand("~/.vimrc.plugs.local"))
        source ~/.vimrc.plugs.local
    endif
" }

" Pulgs End {
    call plug#end()
" }
