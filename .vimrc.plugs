" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"             _                                          _
"        ___ | |_  __ _  _ __  _ __  _   _       __   __(_) _ __ ___
"       / __|| __|/ _` || '__|| '__|| | | | _____\ \ / /| || '_ ` _ \
"       \__ \| |_| (_| || |   | |   | |_| ||_____|\ V / | || | | | | |
"       |___/ \__|\__,_||_|   |_|    \__, |        \_/  |_||_| |_| |_|
"                                    |___/
"
"   This is StarryLeo's .vimrc.plugs file forked from https://github.com/spf13/spf13-vim
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of starry. If you
"   wish to alter which groups are imported, see vimrc.before.
"   If you wish to add or remove individual plugs, create
"   ~/.vimrc.plugs.local and `Plug` or `UnPlug` as needed
"   from there.
"
"   You can find spf13 at http://spf13.com
"   You can find me at https://starrycat.me
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        " XXX: DO NOT USE WINDOWS() LINUX() OSX() HERE! NO THEM DURING UPDATING STARRY-VIM!
        " "&&" takes precedence over "||"
        if has('win32') || has('win64')
            set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

            " Be nice and check for multi_byte even if the config requires
            " multi_byte support most of the time
            if has('multi_byte')
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
            endif
        else
            " Set default encoding to utf-8
            set encoding=utf-8
            set termencoding=utf-8
        endif
    " }

    " Setup Plug Support {
        " The next two lines ensure that the ~/.vim/viplug/ system works
        set runtimepath+=~/.vim/viplug
        call plug#begin('~/.vim/viplug')
    " }

    " Add an UnPlug command {
    function! s:deregister(repo)
      let repo = substitute(a:repo, '[\/]\+$', '', '')
      let name = fnamemodify(repo, ':t:s?\.git$??')
      call remove(g:plugs, name)
      call remove(g:plugs_order, index(g:plugs_order, name))
    endfunction

    command! -nargs=+ -bar UnPlug call s:deregister(<args>)
    " }

" Plugs {

    " Deps {
        Plug 'MarcWeber/vim-addon-mw-utils'
        Plug 'tomtom/tlib_vim'
        if executable('rg') && (has('python') || has('python3'))
            if has('win32') || has('win64')
                Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
            else
                Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
            endif
        elseif executable('ag')
            Plug 'mileszs/ack.vim', { 'on': 'Ack' }
            let g:ackprg = 'ag --vimgrep --nogroup --nocolor --column --smart-case'
        elseif executable('ack-grep')
            Plug 'mileszs/ack.vim', { 'on': 'Ack' }
            let g:ackprg='ack-grep -H --nocolor --nogroup --column'
        elseif executable('ack')
            Plug 'mileszs/ack.vim', { 'on': 'Ack' }
        endif
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    "
    " 在你的 .vimrc.before.local 文件中列出你要用的插件组
    "
    if !exists('g:starry_plug_groups')
        let g:starry_plug_groups=['general', 'youcompleteme', 'deoplete', 'programming', 'markdown', 'cpp', 'python', 'verilog', 'misc',]
    endif

    " To override all the included plugs, add the following to your
    " .vimrc.plugs.local file:
    "
    " 重写插件组包含的插件，将以下值声明在你的 .vimrc.plugs.local 文件
    "
    "   let g:override_starry_plugs = 1
    "
    if !exists('g:override_starry_plugs')

    " General {
        if count(g:starry_plug_groups, 'general')
            Plug 'StarryLeo/starry-vim-colorschemes'
            Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeTabsToggle', 'NERDTreeFocusToggle', 'NERDTreeMirrorOpen'] }
            Plug 'Xuyuanp/nerdtree-git-plugin'
            Plug 'jistr/vim-nerdtree-tabs'
            if has('python') || has('python3')
                if has('win32') || has('win64')
                    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
                else
                    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
                endif
            else
                Plug 'ctrlpvim/ctrlp.vim', { 'on': ['CtrlP', 'CtrlPMRU', 'CtrlPFunky'] }
                Plug 'tacahiroy/ctrlp-funky'
            endif
            if (has('python') || has('python3')) && exists('g:starry_use_powerline')
                Plug 'powerline/powerline', { 'rtp': '/powerline/bindings/vim'}
            else
                Plug 'vim-airline/vim-airline'
                Plug 'vim-airline/vim-airline-themes'
                if !exists('g:starry_airline_tabline')
                    Plug 'bling/vim-bufferline'
                endif
            endif
            if has('win32') || has('win64')
                if has('gui_running')
                    Plug 'StarryLeo/Consolas-with-Yahei', { 'do': '.\install.cmd' }
                endif
            elseif has('gui_running')
                Plug 'StarryLeo/Consolas-with-Yahei', { 'do': './install.sh' }
            endif
            Plug 'mbbill/undotree'
            Plug 'tpope/vim-surround'
            Plug 'tpope/vim-repeat'
            Plug 'tpope/vim-unimpaired'
            Plug 'easymotion/vim-easymotion'
            Plug 'jiangmiao/auto-pairs'
            Plug 'terryma/vim-multiple-cursors'
            Plug 'nathanaelkane/vim-indent-guides'
            Plug 'xolox/vim-misc'
            Plug 'xolox/vim-session'
            if !exists('g:starry_no_views')
                Plug 'vim-scripts/restore_view.vim'
            endif
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
            Plug 'kana/vim-textobj-entire'
            Plug 'glts/vim-textobj-comment'
        endif
    " }

    " AutoComplete & Snippets {
        if count(g:starry_plug_groups, 'youcompleteme')
            if has('win32') || has('win64')
                if exists('g:starry_enable_ycm_on_windows')
                    Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp'] }
                    Plug 'SirVer/ultisnips'
                    Plug 'honza/vim-snippets'
                endif
            else
                Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer', 'for': ['c', 'cpp'] }
                Plug 'SirVer/ultisnips'
                Plug 'honza/vim-snippets'
            endif
        endif
        if count(g:starry_plug_groups, 'deoplete')
            Plug 'Shougo/deoplete.nvim'
            Plug 'roxma/nvim-yarp'
            Plug 'roxma/vim-hug-neovim-rpc'
            Plug 'Shougo/neco-vim'
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
        elseif count(g:starry_plug_groups, 'neocomplete')
            Plug 'Shougo/neocomplete.vim'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        endif
    " }

    " General Programming {
        if count(g:starry_plug_groups, 'programming')
            Plug 'skywind3000/asyncrun.vim', { 'on': 'AsyncRun' }
            Plug 'tpope/vim-fugitive'
            if !exists('g:starry_more_scm_diff')
                Plug 'airblade/vim-gitgutter'
            else
                Plug 'mhinz/vim-signify'
            endif
            Plug 'scrooloose/nerdcommenter'
            Plug 'w0rp/ale'
            Plug 'Chiel92/vim-autoformat', { 'on': 'Autoformat' }
            Plug 'godlygeek/tabular', { 'on': 'Tabularize' }
            if executable('ctags') || (executable('gtags') && executable('gtags-cscope'))
                Plug 'ludovicchabant/vim-gutentags'
                Plug 'skywind3000/gutentags_plus'
                if has('win32') || has('win64')
                    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
                else
                    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
                endif
            endif
            Plug 'luochen1990/rainbow'
        endif
    " }

    " Markdown {
        if count(g:starry_plug_groups, 'markdown')
            Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
            Plug 'iamcco/markdown-preview.nvim', { 'do': ':call mkdp#util#install()', 'for': 'markdown', 'on': 'MarkdownPreview' }
        endif
    " }

    " C / C++ {
        if count(g:starry_plug_groups, 'cpp')
            Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['c', 'cpp'] }
        endif
    " }

    " Python {
        if count(g:starry_plug_groups, 'python')
            Plug 'vim-python/python-syntax', { 'for': 'python' }
            if count(g:starry_plug_groups, 'deoplete')
                Plug 'deoplete-plugins/deoplete-jedi', { 'for': 'python' }
            endif
        endif
    " }

    " Verilog {
        if count(g:starry_plug_groups, 'verilog')
            Plug 'vhda/verilog_systemverilog.vim', { 'for': 'verilog' }
            Plug 'antoinemadec/vim-verilog-instance', { 'for': 'verilog' }
        endif
    " }

    " Go Lang {
        if count(g:starry_plug_groups, 'go')
            Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }
        endif
    " }

    " PHP {
        if count(g:starry_plug_groups, 'php')
            Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }
            Plug 'arnaud-lb/vim-php-namespace', { 'for': 'php' }
        endif
    " }

    " HTML {
        if count(g:starry_plug_groups, 'html')
            Plug 'alvan/vim-closetag', { 'for': ['css', 'html', 'xml', 'xhtml', 'php'] }
            Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'html', 'xml'] }
            Plug 'gko/vim-coloresque', { 'for': ['css', 'html', 'xml'] }
            Plug 'tpope/vim-haml', { 'for': ['haml', 'sass','scss','css', 'html', 'xml'] }
            Plug 'mattn/emmet-vim', { 'for': ['css', 'html', 'xml'] }
        endif
    " }

    " JavaScript {
        if count(g:starry_plug_groups, 'javascript')
            Plug 'elzr/vim-json'
            Plug 'groenewege/vim-less'
            Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
            Plug 'kchmck/vim-coffee-script', { 'for': ['javascript', 'coffee'] }
        endif
    " }

    " Misc {
        if count(g:starry_plug_groups, 'misc')
        endif
    " }

    endif

" }

" Use fork plugs config if available {
    if filereadable(expand('~/.vimrc.plugs.fork'))
        source ~/.vimrc.plugs.fork
    endif
" }

" Use local plugs config if available {
    if filereadable(expand('~/.vimrc.plugs.local'))
        source ~/.vimrc.plugs.local
    endif
" }

" Pulgs End {
    call plug#end()
" }
