language: c
dist: trusty

os:
  - osx
  - linux

compiler:
  - clang
  - gcc

notifications:
  email:
    on_success: never # default: change
    on_failure: never # default: always

env:
  global:
    - DEPS=$HOME/deps
    - PATH=$DEPS/bin:$PATH
  matrix:
    - VIM_VERSION=vim-v8.0.0000
    - VIM_VERSION=vim
    - NVIM_VERSION=nvim-v0.3.1
    - NVIM_VERSION=nvim-nightly
    - NVIM_VERSION=nvim

addons:
  apt:
    sources:
    packages:
      - autoconf
      - clang
      - lcov
      - gettext
      - libcanberra-dev
      - libperl-dev
      - python-dev
      - python3-dev
      - liblua5.2-dev
      - lua5.2
      - ruby-dev
      - tcl-dev
      - cscope
      # Neovim
      - cmake
      - automake
      - g++
      - ninja-build
      - libtool
      - pkg-config
      - unzip
      # for travis no output check, timeout 10m
      - coreutils
  homebrew:
    packages:
      - lua
      # Neovim
      - ccache
      - ninja
      - libtool
      - automake
      - cmake
      - pkg-config
      - gettext
      # for travis no output check, timeout 10m
      - coreutils
    update: true

before_install:
  - rvm reset
  # Use newer python3 in linux
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pyenv global 3.6
    fi
  # timeout is called gtimeout on Travis OSX
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      alias timeout='gtimeout'
    fi
  # Lua is not installed on Travis OSX
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      export LUA_PREFIX=/usr/local
    fi
  # Use llvm-cov instead of gcov when compiler is clang
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$CC" = "clang" ]; then
      ln -sf $(which llvm-cov) /home/travis/bin/gcov
    fi

install:
  - VIM_RELEASE_VERSION=`echo ${VIM_VERSION##*-}`
  - NVIM_RELEASE_VERSION=`echo ${NVIM_VERSION##*-}`
  - echo $(which python3)
  - pip3 install --upgrade pip
  - pip3 install pynvim
  - pip3 install vim-vint pathlib typing enum34
  - mkdir -p ${DEPS}/sources

  - |
    if [ -n "$VIM_RELEASE_VERSION" ] && [ "$VIM_RELEASE_VERSION" != "vim" ]; then
      C_OPTS="--prefix=$DEPS --with-features=huge --enable-perlinterp --enable-pythoninterp --enable-python3interp --enable-rubyinterp --enable-luainterp --enable-tclinterp "

      git clone https://github.com/vim/vim ${DEPS}/sources/vim
      cd ${DEPS}/sources/vim
      git checkout $VIM_RELEASE_VERSION
      ./configure $C_OPTS
      make
      make install
      cd -
    fi

  - |
    if [ "$VIM_RELEASE_VERSION" = "vim" ]; then
      C_OPTS="--prefix=$DEPS --with-features=huge --enable-perlinterp --enable-pythoninterp --enable-python3interp --enable-rubyinterp --enable-luainterp --enable-tclinterp "

      git clone --depth=1 https://github.com/vim/vim ${DEPS}/sources/vim
      cd ${DEPS}/sources/vim
      ./configure $C_OPTS
      make
      make install
      cd -
    fi

  - |
    if [ -n "$NVIM_RELEASE_VERSION" ] && [ "$NVIM_RELEASE_VERSION" != "nvim" ] && [ "$NVIM_RELEASE_VERSION" != "nightly" ]; then
      if [ "$TRAVIS_OS_NAME" = "osx" ]; then
        curl -LO https://github.com/neovim/neovim/releases/download/v0.3.1/nvim-macos.tar.gz
        tar -zx -f nvim-macos.tar.gz --strip-components 1 -C ${DEPS}
      else
        mkdir -p ${DEPS}/bin
        cd ${DEPS}/bin
        curl -LO https://github.com/neovim/neovim/releases/download/v0.3.1/nvim.appimage
        chmod u+x nvim.appimage
        ln -sf nvim.appimage nvim
        cd -
      fi
    fi

  - |
    if [ "$NVIM_RELEASE_VERSION" = "nightly" ]; then
      git clone https://github.com/neovim/neovim ${DEPS}/sources/neovim
      cd ${DEPS}/sources/neovim
      git checkout nightly
      make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$DEPS
      make install
      cd -
    fi

  - |
    if [ "$NVIM_RELEASE_VERSION" = "nvim" ]; then
      git clone --depth=1 https://github.com/neovim/neovim ${DEPS}/sources/neovim
      cd ${DEPS}/sources/neovim
      make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$DEPS
      make install
      cd -
    fi

before_script:
  # More colors for vim
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      export TERM=xterm-256color
    fi

script:
  - vint --error .
  - |
    if [ -n "$VIM_RELEASE_VERSION" ]; then
      echo $(which vim)
      vim --version
      bash <(curl https://git.io/starry-vim -L)
      # After installing starry-vim, test PlugStatus
      vim +PlugStatus +qall
      # Full install and test
      echo "let g:starry_layers = [ 'finder', 'airline', 'editing', 'nerdtree', 'ycm', 'deoplete', 'coc', 'snippets', 'lsp', 'git', 'formatting', 'programming', 'linting', 'lang', 'misc', ]" >> $HOME/.starry/init.vim
      echo "let g:starry_languages = [ 'markdown', 'json', 'cpp', 'python', 'verilog', 'qt', ]" >> $HOME/.starry/init.vim
      timeout --foreground -sKILL 12m vim +PlugInstall +qall
      vim +PlugStatus +qall
    fi

  - |
    if [ -n "$NVIM_RELEASE_VERSION" ]; then
      echo $(which nvim)
      nvim --version
      bash <(curl https://git.io/starry-vim -L)
      # After installing starry-vim, test PlugStatus
      nvim +PlugStatus +qall
      # Full install and test
      echo "let g:starry_layers = [ 'finder', 'airline', 'editing', 'nerdtree', 'ycm', 'deoplete', 'coc', 'snippets', 'lsp', 'git', 'formatting', 'programming', 'linting', 'lang', 'misc', ]" >> $HOME/.starry/init.vim
      echo "let g:starry_languages = [ 'markdown', 'json', 'cpp', 'python', 'verilog', 'qt', ]" >> $HOME/.starry/init.vim
      timeout --foreground -sKILL 12m nvim +PlugInstall +qall
      nvim +PlugStatus +qall
    fi
